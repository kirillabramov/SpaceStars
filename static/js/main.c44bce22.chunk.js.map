{"version":3,"sources":["components/header/header.js","services/star-service.js","components/error/error.js","components/spinner/spinner.js","components/random-planet/random-planet.js","components/hoc/with-data.js","components/item-list/item-list.js","components/star-db/item-lists.js","components/pages/people-page.js","components/pages/planet-page.js","components/pages/starship-page.js","components/item-details/item-details.js","components/hoc/with-details.js","components/star-db/details.js","components/app/app.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Link","to","StarService","_this","this","Object","classCallCheck","makeRequest","_ref","asyncToGenerator","regenerator_default","mark","_callee","url","res","body","wrap","_context","prev","next","fetch","concat","_apiUrl","sent","json","abrupt","stop","_x","apply","arguments","getPerson","_ref2","_callee2","id","person","_context2","_transformPerson","_x2","getPersonImage","_ref3","_imgUrl","getPlanetImage","_ref4","getStarshipImage","_ref5","getPlanet","_ref6","_callee3","planet","_context3","_transformPlanet","_x3","getStarship","_ref7","_callee4","starship","_context4","_transformStarship","_x4","getAllPeople","_callee5","_context5","results","map","getAllPlanets","_callee6","_context6","getAllStarships","_callee7","_context7","_extractId","population","rotationPeriod","rotation_period","name","model","costInCredits","cost_in_credits","length","crew","passengers","gender","height","eyeColor","eye_color","item","match","Error","Spinner","RandomPlanet","possibleConstructorReturn","getPrototypeOf","call","starService","StarSerivce","state","loading","error","onPlanetLoaded","setState","onError","updatePlanet","Math","floor","random","then","catch","updatedInterval","props","setInterval","interval","clearInterval","_this$state","spinner","components_error_error","components_spinner_spinner","random_planet_PlanetView","Component","defaultProps","PlanetView","planetName","setTimeout","document","querySelector","classList","add","Fragment","src","alt","withData","View","getData","_Component","_class","data","inherits","createClass","key","value","_this2","assign","ItemList","renderItem","onItemSelected","items","slice","label","onClick","PersonList","PlanetList","StarshipList","withRouter","history","itemId","push","DetailsItem","field","ItemDetails","_this$props","image","React","Children","children","child","cloneElement","withDetails","getImageUrl","_class2","updateItem","prevProps","PersonDetails","item_details_DetailsItem","PlanetDetails","StarshipDetails","App","BrowserRouter","data-hover","header_header","random_planet_RandomPlanet","Switch","Route","path","render","exact","component","PeoplePage","PlanetPage","StarshipPage","params","Boolean","window","location","hostname","ReactDOM","app_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c44bce22.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './header.scss';\n\n\nconst Header = () => {\n    return(\n        <div className=\"header\">\n            <ul className=\"header__list\">\n                <li className=\"header__list-item\">\n                    <Link to=\"/people/\">People</Link>\n                </li>\n                <li className=\"header__list-item\">\n                    <Link to=\"/planets/\">Planets</Link>\n                </li>\n                <li className=\"header__list-item\">\n                    <Link to=\"/starships/\">Starships</Link>\n                </li>\n            </ul>\n        </div>\n    );\n}\n\n\nexport default Header; ","export default class StarService {\n\n    constructor(){\n        this._apiUrl = 'https://swapi.co/api';\n        this._imgUrl = 'https://starwars-visualguide.com/assets/img';\n    }\n\n\n\n     makeRequest = async (url) => {\n        let res = await fetch(`${this._apiUrl}${url}`);\n        let body = await res.json();\n        return body;\n    }\n\n     getPerson = async (id) => {\n        let person = await this.makeRequest(`/people/${id}`)\n        return this._transformPerson(person);\n     }\n     getPersonImage = ({id}) => {\n         return `${this._imgUrl}/characters/${id}.jpg`\n     }\n     getPlanetImage = ({id}) => {\n        return `${this._imgUrl}/planets/${id}.jpg`\n     }\n     getStarshipImage = ({id}) => {\n        return `${this._imgUrl}/starships/${id}.jpg`\n     }\n     getPlanet = async (id) => {\n        let planet = await this.makeRequest(`/planets/${id}`);\n        return this._transformPlanet(planet);\n    }\n     getStarship = async (id) => {\n        let starship = await this.makeRequest(`/starships/${id}`);\n        return this._transformStarship(starship);\n    }\n\n     getAllPeople = async () => {\n        let res = await this.makeRequest('/people/');\n        return res.results.map(this._transformPerson);\n    }\n\n     getAllPlanets = async () => {\n        let res = await this.makeRequest('/planets/');\n        return res.results.map(this._transformPlanet);\n    }\n\n     getAllStarships = async () => {\n        let res = await this.makeRequest('/starships/');\n        return res.results.map(this._transformStarship);\n    }\n\n\n\n\n\n\n\n    _extractId(item){\n        const idRegExp = /\\/([0-9]*)\\/$/;\n        return item.url.match(idRegExp)[1];\n    }\n    _transformPlanet = (planet) =>{\n       return {\n            id: this._extractId(planet),\n            population: planet.population,\n            rotationPeriod: planet.rotation_period,\n            name: planet.name\n        }\n    }\n    _transformStarship = (starship) =>{\n        return {\n             id: this._extractId(starship),\n             name: starship.name,\n             model: starship.model,\n             costInCredits: starship.cost_in_credits,\n             length: starship.length,\n             crew: starship.crew,\n             passengers: starship.passengers\n         }\n     }\n     _transformPerson = (person) =>{\n         return{\n             id: this._extractId(person),\n             name: person.name,\n             gender: person.gender,\n             height: person.height,\n             eyeColor: person.eye_color\n         }\n     }\n}\n","import React from 'react';\n\nimport './error.scss';\n\nconst Error = () =>{\n    return(\n        <div className=\"error\">\n            <h1 className=\"error__title\">Sorry something went wrong.</h1>\n        </div>\n    )\n}\n\nexport default Error;","\nimport React from 'react';\n\nimport './spinner.scss';\n\n\n\n\nconst Spinner = () =>{\n    return(\n        <div className=\"spinner\">\n            <div className=\"bounce1\"></div>\n            <div className=\"bounce2\"></div>\n            <div className=\"bounce3\"></div>\n        </div>\n    );\n};\n\n\nexport default Spinner;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport StarSerivce from '../../services/star-service';\nimport Error from '../error/error';\nimport Spinner from '../spinner/spinner';\n\nimport './random-planet.scss';\n\n\n\nexport default class RandomPlanet extends Component{\n\n    static defaultProps = {\n        updatedInterval: 10000\n    };\n\n    static propTypes = {\n        updatedInterval: PropTypes.number\n    };\n\n    starService = new StarSerivce();\n    constructor(){\n        super();\n    }\n    componentDidMount(){\n        const { updatedInterval } = this.props;\n        this.updatePlanet();\n        setInterval(this.updatePlanet, updatedInterval);\n        this.interval = setInterval(this.updatePlanet, 10000);\n    }\n\n    componentWillUnmount(){\n        clearInterval(this.interval);\n    }\n\n    state = {\n        planet: {},\n        loading: true,\n        error: false\n    }\n\n    onPlanetLoaded = (planet) => {\n        this.setState({\n            planet,\n            loading: false\n        });\n    };\n\n    onError = () => {\n        this.setState({\n            error: true,\n            loading: false\n        });\n    }\n    updatePlanet = () => {\n        const id = Math.floor(Math.random()*25) + 3;\n        this.starService\n        .getPlanet(id)\n        .then(this.onPlanetLoaded)\n        .catch(this.onError);\n    };\n\n\n    render(){\n\n        const { planet, loading, error } = this.state;\n        const spinner = error ? <Error/> : loading ? <Spinner />  : <PlanetView planet={planet}/>;\n\n        return(\n            <div className=\"random-planet\">\n                {spinner}\n            </div>\n        );\n           \n        }\n}\n\n\nconst PlanetView = ({planet}) => {\n    const {id, population, rotationPeriod, planetName} = planet;\n    setTimeout(() => {\n        document.querySelector('.random-planet__population').classList.add('random-planet__population--loaded');\n    }, 100);\n    return(\n        <React.Fragment>\n            <div className=\"random-planet__image\">\n                <img src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`} alt=\"planet-photo\"/>\n            </div>\n            <div className=\"random-planet__description\">\n                <h1 className=\"random-planet__name\">{ planetName }</h1>\n                <div className=\"random-planet__info\">\n                    <p className=\"random-planet__population\">Population: <span> {population} </span></p>\n                    <p className=\"random-planet__period\">Rotation period: <span> {rotationPeriod} </span></p>\n                </div>\n            </div>\n        </React.Fragment>\n    )\n};","import React, { Component } from 'react';\nimport Spinner from '../spinner/spinner';\n\n\n\n\nconst withData = (View, getData) => {\n\n    return class extends Component{\n    \n        constructor(props){\n            super(props);\n            this.state = {\n                data: null\n            }\n        };\n    \n    \n        componentDidMount(){\n            getData()\n            .then((data) => {\n                this.setState({\n                    data\n                });\n            });\n        }\n        render(){\n            const { data } = this.state;\n            if(!data){\n                return <Spinner />;\n            }\n\n            return <View {...this.props} data={data} />\n        }\n    }\n}\n\nexport {\n    withData\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './item-list.scss';\n\nconst ItemList = (props) => {\n\n    const { renderItem, onItemSelected, data} = props;\n    const items = data.slice(5, 10).map((item) => {\n            const label = renderItem(item);\n            return(\n                <li className=\"item-list__item\" \n                key={item.id}\n                onClick={() => onItemSelected(item.id)}>\n                    {label}\n                </li>\n            )\n        });\n\n        return(\n            <div className=\"item-list\">\n                <ul className=\"item-list__list\">\n                    {items}\n                </ul>\n            </div>\n        );\n    \n}\n// ItemList.defaultProps = {\n//     onItemSelected: () => {console.log('default props')}\n// };\n\n// ItemList.propTypes = {\n//     onItemSelected: PropTypes.func,\n//     date: PropTypes.arrayOf(PropTypes.object),\n//     renderItem: PropTypes.func.isRequired\n// };\n\nexport default ItemList;","import StarSerivce from '../../services/star-service';\nimport { withData } from '../hoc/with-data';\nimport ItemList from '../item-list/item-list';\n\n\n\nconst { \n    getAllPeople,\n    getAllPlanets,\n    getAllStarships\n} = new StarSerivce();\n\nconst PersonList = withData(ItemList, getAllPeople);\nconst PlanetList = withData(ItemList, getAllPlanets);\nconst StarshipList = withData(ItemList, getAllStarships);\n\n\n\nexport {\n    PersonList,\n    PlanetList,\n    StarshipList\n}","import React from 'react';\nimport { PersonList } from '../star-db/item-lists';\nimport withRouter from 'react-router-dom/withRouter';\n\n\n\nconst PeoplePage = ({history}) => {\n\n        return(\n            <PersonList \n                onItemSelected={\n                (itemId) => {\n                    history.push(itemId);\n                }} \n                renderItem={({name, gender}) => `${name} (${gender})`}/>    \n            );\n        \n}\n\nexport default withRouter(PeoplePage);","import React from 'react';\nimport { PlanetList } from '../star-db/item-lists';\nimport withRouter from 'react-router-dom/withRouter';\n\n\n\n\n const PlanetPage = ({ history }) => {\n        return(\n            <PlanetList \n            onItemSelected={(itemId) => {\n                history.push(itemId);\n            }} \n            renderItem={({name}) => `${name}`} />\n        );\n}\n\nexport default withRouter(PlanetPage);","import React from 'react';\nimport { StarshipList } from '../star-db/item-lists';\nimport { withRouter } from 'react-router-dom';\n \nconst StarshipPage = ({ history }) => {\n\n    return( \n        <StarshipList \n        onItemSelected={ (itemId) => {\n            history.push(itemId);\n        }} \n        renderItem={({name}) => `${name}`} />\n    );\n\n}\n\nexport default withRouter(StarshipPage);","import React, { Component } from 'react';\nimport Spinner from '../spinner/spinner'\nimport './item-details.scss';\n\n\n\n\nconst DetailsItem = ({item, field, label}) => {\n    return(\n        <p className=\"item-details__label\">{label} <span>{item[field]}</span></p>\n    );\n};\n\nexport default class ItemDetails extends Component{\n\n\n    render(){\n        if(!this.props.item){\n            return <Spinner />\n        };\n\n        const { \n            item: {\n                name,\n            },\n            image\n        } = this.props;\n        const item = this.props.item;\n        \n        return(\n            <div className=\"item-details\">\n                <div className=\"item-details__photo\">\n                    <img  src={image} alt=\"item-photo\"/>\n                </div>\n                <div className=\"item-details__description\">\n                    <div className=\"item-details__name\">{name}</div>\n                    <div className=\"item-details__separator\"></div>\n                    {React.Children.map(this.props.children, (child) => {\n                        return React.cloneElement(child, { item });\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n\n\n\n\nexport {\n    DetailsItem\n};","import React, { Component } from 'react';\n\n\n\nconst withDetails = (View, DetailsItem, getData, getImageUrl) => {\n    return class extends Component{\n\n        constructor(props){\n            super(props);\n    \n            this.state = {\n                item: null,\n                image: null\n            };\n        }\n\n        updateItem = () => {\n            if(!this.props.itemId) {\n                return;\n            }\n            getData(this.props.itemId)\n            .then((item) => {\n                this.setState({\n                    item,\n                    image: getImageUrl(item)\n                });\n            });\n        }\n    \n    \n        componentDidMount(){\n            this.updateItem();\n        }\n    \n        componentDidUpdate(prevProps){\n            if(this.props.itemId !== prevProps.itemId){\n                this.updateItem();\n            }\n        }\n\n        render(){\n            return (\n            <View \n                \n                image={this.state.image}\n                item={this.state.item}>\n                {DetailsItem}\n                </View> );\n            \n        }\n    }\n}\n\nexport{\n    withDetails\n};","import React from 'react';\nimport ItemDetails, { DetailsItem } from '../item-details/item-details';\nimport { withDetails } from '../hoc/with-details';\nimport StarService from '../../services/star-service';\n\n\n\nconst {\n    getPerson,\n    getPersonImage,\n    getStarship,\n    getStarshipImage,\n    getPlanet,\n    getPlanetImage\n} = new StarService();\n\nconst PersonDetails = withDetails(\n    ItemDetails,\n    [\n        <DetailsItem field=\"gender\" label=\"Gender:\"/>,\n        <DetailsItem field=\"eyeColor\" label=\"Eye Color:\"/>,\n        <DetailsItem field=\"height\" label=\"Height:\"/>\n    ],\n    getPerson,\n    getPersonImage\n\n);\nconst PlanetDetails = withDetails(\n    ItemDetails,\n    [ \n        <DetailsItem field=\"name\" label=\"Name:\"/>,\n        <DetailsItem field=\"population\" label=\"Population:\"/>,\n        <DetailsItem field=\"rotationPeriod\" label=\"Rotation period:\"/>\n       \n    ],\n    getPlanet,\n    getPlanetImage\n\n);\nconst StarshipDetails = withDetails(\n    ItemDetails,\n    [\n        <DetailsItem field=\"model\" label=\"Model:\"/>,\n        <DetailsItem field=\"costInCredits\" label=\"Cost:\"/>,\n        <DetailsItem field=\"passengers\" label=\"Passengers:\"/>,\n        <DetailsItem field=\"crew\" label=\"Crew:\"/>\n    ],\n    getStarship,\n    getStarshipImage\n);\n\n\nexport {\n    PersonDetails,\n    PlanetDetails,\n    StarshipDetails\n}\n\n","import React, { Component } from 'react';\nimport './app.scss';\nimport Header from '../header/header';\nimport RandomPlanet from '../random-planet/random-planet';\nimport PeoplePage from '../pages/people-page';\nimport PlanetPage from '../pages/planet-page';\nimport StarshipPage from '../pages/starship-page';\nimport StarService from '../../services/star-service';\nimport { StarshipDetails, PlanetDetails, PersonDetails } from '../star-db/details';\nimport { BrowserRouter as Router, Route, Link, Switch, Redirect } from 'react-router-dom';\nexport default class App extends Component{\n\n\n    starService = new StarService();\n\n\n\n    \n\n    render(){\n        return(\n            <Router>\n                <div className=\"app\">\n                    <div className=\"app__wrapper\">\n                        <div className=\"app__inner\">\n                            <div className=\"app__header\">\n                                <Link to=\"/\" className=\"app__logo\" data-hover=\"SpaceStars\">SpaceStars</Link>\n                                <Header />\n                            </div>\n                            <RandomPlanet />\n                            <div className=\"app__details\">\n                                <Switch>\n                                        <Route \n                                        path=\"/\" \n                                        render={\n                                            () => <h2 className=\"app--welcome\">Welcome to SpaceStars</h2>\n                                        } \n                                        exact\n                                        />\n\n                                        <Route path=\"/people/\" exact component={PeoplePage} />\n                                        <Route path=\"/planets\" exact component={PlanetPage} />\n                                        <Route path=\"/starships\" exact component={StarshipPage} />\n\n                                        <Route path=\"/starships/:id\" render={\n                                            ({ match }) => {\n                                                const { id } = match.params;\n                                                return <StarshipDetails itemId={ id }/>\n                                            }\n                                        } />\n                                        <Route path=\"/planets/:id\" render={\n                                            ({ match }) => {\n                                                const { id } = match.params;\n                                                return <PlanetDetails itemId={ id }/>\n                                            }\n                                        } />\n                                        <Route path=\"/people/:id\" render={\n                                            ({ match }) => {\n                                                const { id } = match.params;\n                                                return <PersonDetails itemId={ id }/>\n                                            }\n                                        } />\n                                        <Route render={() => {\n                                            return(\n                                                <div className=\"page-not-found\">\n                                                    <h2>Page not found</h2>\n                                                    <Link to=\"/\">Home</Link>\n                                                </div>\n                                            )\n                                        }} />\n                                </Switch>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Router>\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/app.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}